basePath: /
definitions:
  domain.CreateUserRequest:
    properties:
      birthday:
        type: string
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
    required:
    - birthday
    - email
    - firstname
    - lastname
    - password
    - phone
    type: object
  domain.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  domain.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/domain.User'
    type: object
  domain.User:
    properties:
      birthday:
        type: string
      created_at:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  interfaces.APIResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  interfaces.ErrorResponse:
    properties:
      error:
        type: string
    type: object
host: localhost:3333
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A simple Go API with user authentication using Clean Architecture
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go Chi API
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Get a hello world message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/interfaces.APIResponse'
      summary: Hello World
      tags:
      - general
  /login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/domain.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/interfaces.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/interfaces.ErrorResponse'
      summary: Login User
      tags:
      - auth
  /me:
    get:
      consumes:
      - application/json
      description: Get current user information from JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/interfaces.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/interfaces.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Current User
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/domain.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/interfaces.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/interfaces.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/interfaces.ErrorResponse'
      summary: Register User
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
